{"version":3,"sources":["../src/createbadge.js"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","CreateBadge","selector","contextid","course","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","data","hide","use","M","core_formchangechecker","reset_form_dirty_state","item","parse","tableLine","id","name","courseid","badgeid","appendTo","fadeIn","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","message","handleFormSubmissionFailure","e","preventDefault","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit"],"mappings":"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","sourcesContent":["/**\n * Create badge js logic.\n *\n * @package    local_evokegame\n * @copyright  2021 World Bank Group <https://worldbank.org>\n * @author     Willian Mano <willianmanoaraujo@gmail.com>\n */\n\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'local_evokegame/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n        /**\n         * Constructor for the CreateBadge.\n         *\n         * @param selector The selector to open the modal\n         * @param contextid The course module contextid\n         * @param course The course id\n         */\n        var CreateBadge = function(selector, contextid, course) {\n            this.contextid = contextid;\n\n            this.course = course;\n\n            this.init(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        CreateBadge.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        CreateBadge.prototype.contextid = -1;\n\n        /**\n         * @var {int} course\n         * @private\n         */\n        CreateBadge.prototype.course = -1;\n\n        /**\n         * Set up all of the event handling for the modal.\n         *\n         * @method init\n         */\n        CreateBadge.prototype.init = function(selector) {\n            var triggers = $(selector);\n\n            return Str.get_string('createbadge', 'local_evokegame').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody({course: this.course})\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody({course: this.course}));\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                this.modal.getRoot().on(ModalEvents.shown, function() {\n                    this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        CreateBadge.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('local_evokegame', 'badge_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        CreateBadge.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            var item = JSON.parse(data.data);\n\n            var tableLine = $('<tr>' +\n                '<th scope=\"row\">'+item.id+'</th>' +\n                '<td>'+item.name+'</td>' +\n                '<td style=\"width: 120px; text-align: center;\">' +\n                '<a href=\"#\" data-id=\"'+item.id+'\" data-name=\"'+item.name+'\"' +\n                    'data-courseid=\"'+item.courseid+'\" data-badgeid=\"'+item.badgeid+'\"' +\n                    'class=\"btn btn-warning btn-sm edit-evokegame-badge\">' +\n                '<i class=\"fa fa-pencil-square-o text-white\"></i>' +\n                '</a> ' +\n                '<a href=\"#\" data-id=\"'+item.id+'\" class=\"btn btn-danger btn-sm delete-evokegame-badge\">' +\n                '<i class=\"fa fa-trash-o\"></i>' +\n                '</a> ' +\n                '</td>' +\n                '</tr>');\n\n            tableLine\n                .appendTo('.table-evokegame-badges tbody')\n                .hide().fadeIn('normal');\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 8000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.message\n            });\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         *\n         * @private\n         *\n         * @return {Promise}\n         */\n        CreateBadge.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        CreateBadge.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'local_evokegame_createbadge',\n                args: {contextid: this.contextid, course: this.course, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        CreateBadge.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(selector, contextid, course) {\n                return new CreateBadge(selector, contextid, course);\n            }\n        };\n    }\n);\n"],"file":"createbadge.min.js"}