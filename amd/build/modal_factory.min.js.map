{"version":3,"sources":["../src/modal_factory.js"],"names":["define","$","ModalEvents","ModalRegistry","Modal","ModalSaveCancel","ModalCancel","ModalAlert","Templates","Notification","CustomEvents","Pending","TYPES","DEFAULT","SAVE_CANCEL","CANCEL","ALERT","setUpTrigger","modalPromise","triggerElement","modalConfig","actualTriggerElement","hasPreShowCallback","preShowCallback","triggeredCallback","e","data","pendingPromise","currentTarget","then","modal","show","resolve","originalEvent","preventDefault","Array","isArray","selector","events","activate","on","getRoot","hidden","focus","createFromElement","registryConf","modalElement","Module","module","createFromType","templateContext","templateName","template","render","html","fail","exception","create","type","isLarge","large","isScrollable","hasOwnProperty","scrollable","badgename","badgeimage","courseid","get","message","console","log","title","setTitle","body","setBody","footer","setFooter","setBadgeName","setBadgeImage","setCourseid","buttons","Object","entries","forEach","key","value","setButtonText","setLarge","removeOnClose","setRemoveOnClose","setScrollable","types"],"mappings":"+qCASAA,OAAM,iCAAC,CAAC,QAAD,CAAW,mBAAX,CAAgC,qBAAhC,CAAuD,YAAvD,CACC,wBADD,CAC2B,mBAD3B,CACgD,wBADhD,CAEC,gBAFD,CAEmB,mBAFnB,CAEwC,gCAFxC,CAGC,cAHD,CAAD,CAIF,SAASC,CAAT,CAAYC,CAAZ,CAAyBC,CAAzB,CAAwCC,CAAxC,CAA+CC,CAA/C,CACSC,CADT,CACsBC,CADtB,CACkCC,CADlC,CAC6CC,CAD7C,CAC2DC,CAD3D,CACyEC,CADzE,CACkF,IAa1EC,CAAAA,CAAK,CAAG,CACRC,OAAO,CAAE,SADD,CAERC,WAAW,CAAE,aAFL,CAGRC,MAAM,CAAE,QAHA,CAIRC,KAAK,CAAE,OAJC,CAbkE,CA8B1EC,CAAY,CAAG,SAASC,CAAT,CAAuBC,CAAvB,CAAuCC,CAAvC,CAAoD,IAE/DC,CAAAA,CAAoB,CAAG,IAFwC,CAK/DC,CAAkB,CAA0C,UAAtC,QAAOF,CAAAA,CAAW,CAACG,eALsB,CAO/DC,CAAiB,CAAG,SAASC,CAAT,CAAYC,CAAZ,CAAkB,CACtC,GAAIC,CAAAA,CAAc,CAAG,GAAIhB,CAAAA,CAAJ,CAAY,mDAAZ,CAArB,CACAU,CAAoB,CAAGpB,CAAC,CAACwB,CAAC,CAACG,aAAH,CAAxB,CACAV,CAAY,CAACW,IAAb,CAAkB,SAASC,CAAT,CAAgB,CAC9B,GAAIR,CAAJ,CAAwB,CAGpBF,CAAW,CAACG,eAAZ,CAA4BF,CAA5B,CAAkDS,CAAlD,CACH,CAEDA,CAAK,CAACC,IAAN,GAEA,MAAOD,CAAAA,CACV,CAVD,EAWKD,IAXL,CAWUF,CAAc,CAACK,OAXzB,EAYAN,CAAI,CAACO,aAAL,CAAmBC,cAAnB,EACH,CAvBkE,CA4BnE,GAAIC,KAAK,CAACC,OAAN,CAAcjB,CAAd,CAAJ,CAAmC,CAC/B,GAAIkB,CAAAA,CAAQ,CAAGlB,CAAc,CAAC,CAAD,CAA7B,CACAA,CAAc,CAAGA,CAAc,CAAC,CAAD,CAA/B,CAEAT,CAAY,CAACV,MAAb,CAAoBmB,CAApB,CAAoC,CAACT,CAAY,CAAC4B,MAAb,CAAoBC,QAArB,CAApC,EACApB,CAAc,CAACqB,EAAf,CAAkB9B,CAAY,CAAC4B,MAAb,CAAoBC,QAAtC,CAAgDF,CAAhD,CAA0Db,CAA1D,CACH,CAND,IAMO,CACHd,CAAY,CAACV,MAAb,CAAoBmB,CAApB,CAAoC,CAACT,CAAY,CAAC4B,MAAb,CAAoBC,QAArB,CAApC,EACApB,CAAc,CAACqB,EAAf,CAAkB9B,CAAY,CAAC4B,MAAb,CAAoBC,QAAtC,CAAgDf,CAAhD,CACH,CAEDN,CAAY,CAACW,IAAb,CAAkB,SAASC,CAAT,CAAgB,CAC9BA,CAAK,CAACW,OAAN,GAAgBD,EAAhB,CAAmBtC,CAAW,CAACwC,MAA/B,CAAuC,UAAW,CAE9C,GAA6B,IAAzB,GAAArB,CAAJ,CAAmC,CAC/BA,CAAoB,CAACsB,KAArB,EACH,CACJ,CALD,EAOA,MAAOb,CAAAA,CACV,CATD,CAUH,CA/E6E,CA2F1Ec,CAAiB,CAAG,SAASC,CAAT,CAAuBC,CAAvB,CAAqC,CACzDA,CAAY,CAAG7C,CAAC,CAAC6C,CAAD,CAAhB,CADyD,GAErDC,CAAAA,CAAM,CAAGF,CAAY,CAACG,MAF+B,CAGrDlB,CAAK,CAAG,GAAIiB,CAAAA,CAAJ,CAAWD,CAAX,CAH6C,CAKzD,MAAOhB,CAAAA,CACV,CAjG6E,CA6G1EmB,CAAc,CAAG,SAASJ,CAAT,CAAuBK,CAAvB,CAAwC,IACrDC,CAAAA,CAAY,CAAGN,CAAY,CAACO,QADyB,CAGrDlC,CAAY,CAAGV,CAAS,CAAC6C,MAAV,CAAiBF,CAAjB,CAA+BD,CAA/B,EACdrB,IADc,CACT,SAASyB,CAAT,CAAe,CACjB,GAAIR,CAAAA,CAAY,CAAG7C,CAAC,CAACqD,CAAD,CAApB,CACA,MAAOV,CAAAA,CAAiB,CAACC,CAAD,CAAeC,CAAf,CAC3B,CAJc,EAKdS,IALc,CAKT9C,CAAY,CAAC+C,SALJ,CAHsC,CAUzD,MAAOtC,CAAAA,CACV,CAxH6E,CA8M9E,MAAO,CACHuC,MAAM,CA7EG,QAATA,CAAAA,MAAS,CAASrC,CAAT,CAAsBD,CAAtB,CAAsC,IAC3CuC,CAAAA,CAAI,CAAGtC,CAAW,CAACsC,IAAZ,EAAoB9C,CAAK,CAACC,OADU,CAE3C8C,CAAO,CAAGvC,CAAW,CAACwC,KAAZ,MAFiC,CAI3CC,CAAY,CAAGzC,CAAW,CAAC0C,cAAZ,CAA2B,YAA3B,EAA2C1C,CAAW,CAAC2C,UAAvD,GAJ4B,CAK3ClB,CAAY,CAAG,IAL4B,CAM3CK,CAAe,CAAG,CAClBc,SAAS,CAAE5C,CAAW,CAAC4C,SADL,CAElBC,UAAU,CAAE7C,CAAW,CAAC6C,UAFN,CAGlBC,QAAQ,CAAE9C,CAAW,CAAC8C,QAHJ,CANyB,CAY/CrB,CAAY,CAAG1C,CAAa,CAACgE,GAAd,CAAkBT,CAAlB,CAAf,CAEA,GAAI,CAACb,CAAL,CAAmB,CACfpC,CAAY,CAAC+C,SAAb,CAAuB,CAACY,OAAO,CAAE,iCAAmCV,CAA7C,CAAvB,CACH,CAEDW,OAAO,CAACC,GAAR,CAAYpB,CAAZ,EACA,GAA0C,WAAtC,QAAO9B,CAAAA,CAAW,CAAC8B,eAAvB,CAAuD,CACnDA,CAAe,CAAG9B,CAAW,CAAC8B,eACjC,CAED,GAAIhC,CAAAA,CAAY,CAAG+B,CAAc,CAACJ,CAAD,CAAeK,CAAf,CAAd,CACdrB,IADc,CACT,SAASC,CAAT,CAAgB,CAClB,GAAgC,WAA5B,QAAOV,CAAAA,CAAW,CAACmD,KAAvB,CAA6C,CACzCzC,CAAK,CAAC0C,QAAN,CAAepD,CAAW,CAACmD,KAA3B,CACH,CAED,GAA+B,WAA3B,QAAOnD,CAAAA,CAAW,CAACqD,IAAvB,CAA4C,CACxC3C,CAAK,CAAC4C,OAAN,CAActD,CAAW,CAACqD,IAA1B,CACH,CAED,GAAiC,WAA7B,QAAOrD,CAAAA,CAAW,CAACuD,MAAvB,CAA8C,CAC1C7C,CAAK,CAAC8C,SAAN,CAAgBxD,CAAW,CAACuD,MAA5B,CACH,CAED,GAAoC,WAAhC,QAAOvD,CAAAA,CAAW,CAAC4C,SAAvB,CAAiD,CAC7ClC,CAAK,CAAC+C,YAAN,CAAmBzD,CAAW,CAAC4C,SAA/B,CACH,CAED,GAAqC,WAAjC,QAAO5C,CAAAA,CAAW,CAAC6C,UAAvB,CAAkD,CAC9CnC,CAAK,CAACgD,aAAN,CAAoB1D,CAAW,CAAC6C,UAAhC,CACH,CAED,GAAmC,WAA/B,QAAO7C,CAAAA,CAAW,CAAC8C,QAAvB,CAAgD,CAC5CpC,CAAK,CAACiD,WAAN,CAAkB3D,CAAW,CAAC8C,QAA9B,CACH,CAED,GAAI9C,CAAW,CAAC4D,OAAhB,CAAyB,CACrBC,MAAM,CAACC,OAAP,CAAe9D,CAAW,CAAC4D,OAA3B,EAAoCG,OAApC,CAA4C,WAAuB,2BAAbC,CAAa,MAARC,CAAQ,MAC/DvD,CAAK,CAACwD,aAAN,CAAoBF,CAApB,CAAyBC,CAAzB,CACH,CAFD,CAGH,CAED,GAAI1B,CAAJ,CAAa,CACT7B,CAAK,CAACyD,QAAN,EACH,CAED,GAAyC,WAArC,QAAOnE,CAAAA,CAAW,CAACoE,aAAvB,CAAsD,CAElD1D,CAAK,CAAC2D,gBAAN,CAAuBrE,CAAW,CAACoE,aAAnC,CACH,CAED1D,CAAK,CAAC4D,aAAN,CAAoB7B,CAApB,EAEA,MAAO/B,CAAAA,CACV,CA5Cc,CAAnB,CA8CA,GAA6B,WAAzB,QAAOX,CAAAA,CAAX,CAA0C,CACtCF,CAAY,CAACC,CAAD,CAAeC,CAAf,CAA+BC,CAA/B,CACf,CAED,MAAOF,CAAAA,CACV,CAEM,CAEHyE,KAAK,CAAE/E,CAFJ,CAIV,CAvNC,CAAN","sourcesContent":["/**\n * Modal factory js logic.\n *\n * @package    local_evokegame\n * @copyright  2021 World Bank Group <https://worldbank.org>\n * @author     Willian Mano <willianmanoaraujo@gmail.com>\n */\n\n/* eslint-disable */\ndefine(['jquery', 'core/modal_events', 'core/modal_registry', 'core/modal',\n        'core/modal_save_cancel', 'core/modal_cancel', 'core/local/modal/alert',\n        'core/templates', 'core/notification', 'core/custom_interaction_events',\n        'core/pending'],\n    function($, ModalEvents, ModalRegistry, Modal, ModalSaveCancel,\n             ModalCancel, ModalAlert, Templates, Notification, CustomEvents, Pending) {\n\n        /**\n         * The available types of modals.\n         *\n         * @constant\n         * @static\n         * @public\n         * @property {String} DEFAULT The default modal\n         * @property {String} SAVE_CANCEL A modal which can be used to either save, or cancel.\n         * @property {String} CANCEL A modal which displayed a cancel button\n         * @property {String} ALERT An information modal which only displays information.\n         */\n        var TYPES = {\n            DEFAULT: 'DEFAULT',\n            SAVE_CANCEL: 'SAVE_CANCEL',\n            CANCEL: 'CANCEL',\n            ALERT: 'ALERT',\n        };\n\n        /**\n         * Set up the events required to show the modal and return focus when the modal\n         * is closed.\n         *\n         * @method setUpTrigger\n         * @private\n         * @param {Promise} modalPromise The modal instance\n         * @param {object} triggerElement The jQuery element to open the modal\n         * @param {object} modalConfig The modal configuration given to the factory\n         */\n        var setUpTrigger = function(modalPromise, triggerElement, modalConfig) {\n            // The element that actually shows the modal.\n            var actualTriggerElement = null;\n            // Check if the client has provided a callback function to be called\n            // before the modal is displayed.\n            var hasPreShowCallback = (typeof modalConfig.preShowCallback == 'function');\n            // Function to handle the trigger element being activated.\n            var triggeredCallback = function(e, data) {\n                var pendingPromise = new Pending('core/modal_factory:setUpTrigger:triggeredCallback');\n                actualTriggerElement = $(e.currentTarget);\n                modalPromise.then(function(modal) {\n                    if (hasPreShowCallback) {\n                        // If the client provided a pre-show callback then execute\n                        // it now before showing the modal.\n                        modalConfig.preShowCallback(actualTriggerElement, modal);\n                    }\n\n                    modal.show();\n\n                    return modal;\n                })\n                    .then(pendingPromise.resolve);\n                data.originalEvent.preventDefault();\n            };\n\n            // The trigger element can either be a single element or it can be an\n            // element + selector pair to create a delegated event handler to trigger\n            // the modal.\n            if (Array.isArray(triggerElement)) {\n                var selector = triggerElement[1];\n                triggerElement = triggerElement[0];\n\n                CustomEvents.define(triggerElement, [CustomEvents.events.activate]);\n                triggerElement.on(CustomEvents.events.activate, selector, triggeredCallback);\n            } else {\n                CustomEvents.define(triggerElement, [CustomEvents.events.activate]);\n                triggerElement.on(CustomEvents.events.activate, triggeredCallback);\n            }\n\n            modalPromise.then(function(modal) {\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Focus on the trigger element that actually launched the modal.\n                    if (actualTriggerElement !== null) {\n                        actualTriggerElement.focus();\n                    }\n                });\n\n                return modal;\n            });\n        };\n\n        /**\n         * Create the correct instance of a modal based on the givem type. Sets up\n         * the trigger between the modal and the trigger element.\n         *\n         * @method createFromElement\n         * @private\n         * @param {object} registryConf A config from the ModalRegistry\n         * @param {object} modalElement The modal HTML jQuery object\n         * @return {object} Modal instance\n         */\n        var createFromElement = function(registryConf, modalElement) {\n            modalElement = $(modalElement);\n            var Module = registryConf.module;\n            var modal = new Module(modalElement);\n\n            return modal;\n        };\n\n        /**\n         * Create the correct modal instance for the given type, including loading\n         * the correct template.\n         *\n         * @method createFromType\n         * @private\n         * @param {object} registryConf A config from the ModalRegistry\n         * @param {object} templateContext The context to render the template with\n         * @returns {promise} Resolved with a Modal instance\n         */\n        var createFromType = function(registryConf, templateContext) {\n            var templateName = registryConf.template;\n\n            var modalPromise = Templates.render(templateName, templateContext)\n                .then(function(html) {\n                    var modalElement = $(html);\n                    return createFromElement(registryConf, modalElement);\n                })\n                .fail(Notification.exception);\n\n            return modalPromise;\n        };\n\n        /**\n         * Create a Modal instance.\n         *\n         * @method create\n         * @param {object} modalConfig The configuration to create the modal instance\n         * @param {object} triggerElement The trigger HTML jQuery object\n         * @return {promise} Resolved with a Modal instance\n         */\n        var create = function(modalConfig, triggerElement) {\n            var type = modalConfig.type || TYPES.DEFAULT;\n            var isLarge = modalConfig.large ? true : false;\n            // If 'scrollable' is not configured, set the modal to be scrollable by default.\n            var isScrollable = modalConfig.hasOwnProperty('scrollable') ? modalConfig.scrollable : true;\n            var registryConf = null;\n            var templateContext = {\n                badgename: modalConfig.badgename,\n                badgeimage: modalConfig.badgeimage,\n                courseid: modalConfig.courseid\n            };\n\n            registryConf = ModalRegistry.get(type);\n\n            if (!registryConf) {\n                Notification.exception({message: 'Unable to find modal of type: ' + type});\n            }\n\n            console.log(templateContext);\n            if (typeof modalConfig.templateContext != 'undefined') {\n                templateContext = modalConfig.templateContext;\n            }\n\n            var modalPromise = createFromType(registryConf, templateContext)\n                .then(function(modal) {\n                    if (typeof modalConfig.title != 'undefined') {\n                        modal.setTitle(modalConfig.title);\n                    }\n\n                    if (typeof modalConfig.body != 'undefined') {\n                        modal.setBody(modalConfig.body);\n                    }\n\n                    if (typeof modalConfig.footer != 'undefined') {\n                        modal.setFooter(modalConfig.footer);\n                    }\n\n                    if (typeof modalConfig.badgename != 'undefined') {\n                        modal.setBadgeName(modalConfig.badgename);\n                    }\n\n                    if (typeof modalConfig.badgeimage != 'undefined') {\n                        modal.setBadgeImage(modalConfig.badgeimage);\n                    }\n\n                    if (typeof modalConfig.courseid != 'undefined') {\n                        modal.setCourseid(modalConfig.courseid);\n                    }\n\n                    if (modalConfig.buttons) {\n                        Object.entries(modalConfig.buttons).forEach(function([key, value]) {\n                            modal.setButtonText(key, value);\n                        });\n                    }\n\n                    if (isLarge) {\n                        modal.setLarge();\n                    }\n\n                    if (typeof modalConfig.removeOnClose !== 'undefined') {\n                        // If configured remove the modal when hiding it.\n                        modal.setRemoveOnClose(modalConfig.removeOnClose);\n                    }\n\n                    modal.setScrollable(isScrollable);\n\n                    return modal;\n                });\n\n            if (typeof triggerElement != 'undefined') {\n                setUpTrigger(modalPromise, triggerElement, modalConfig);\n            }\n\n            return modalPromise;\n        };\n\n        return {\n            create: create,\n            types: TYPES,\n        };\n    });\n"],"file":"modal_factory.min.js"}