{"version":3,"file":"editbadge.min.js","sources":["../src/editbadge.js"],"sourcesContent":["/**\n * Edit badge js logic.\n *\n * @copyright  2021 World Bank Group <https://worldbank.org>\n * @author     Willian Mano <willianmanoaraujo@gmail.com>\n */\n\ndefine([\n        'jquery',\n        'core/config',\n        'core/str',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        'core/ajax',\n        'local_evokegame/sweetalert',\n        'core/yui'],\n    function($, Config, Str, ModalFactory, ModalEvents, Fragment, Ajax, Swal, Y) {\n\n        var EditBadge = function(contextid) {\n            this.contextid = contextid;\n\n            this.registerEventListeners();\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        EditBadge.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        EditBadge.prototype.contextid = -1;\n\n        EditBadge.prototype.eventtarget = null;\n\n        EditBadge.prototype.registerEventListeners = function() {\n            $(\"body\").on(\"click\", \".edit-evokegame-badge\", function(event) {\n                event.preventDefault();\n\n                this.eventtarget = $(event.currentTarget);\n\n                return Str.get_string('editbadge', 'local_evokegame').then(function(title) {\n                    // Create the modal.\n                    return ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: title,\n                        body: this.getBody({\n                            id: this.eventtarget.data('id'),\n                            name: this.eventtarget.data('name'),\n                            description: this.eventtarget.data('description'),\n                            type: this.eventtarget.data('type'),\n                            highlight: this.eventtarget.data('highlight'),\n                            courseid: this.eventtarget.data('courseid'),\n                            badgeid: this.eventtarget.data('badgeid')\n                        })\n                    });\n                }.bind(this)).then(function(modal) {\n                    // Keep a reference to the modal.\n                    this.modal = modal;\n\n                    // We want to reset the form every time it is opened.\n                    this.modal.getRoot().on(ModalEvents.hidden, function() {\n                        this.modal.setBody(this.getBody({\n                            id: this.eventtarget.data('id'),\n                            name: this.eventtarget.data('name'),\n                            description: this.eventtarget.data('description'),\n                            type: this.eventtarget.data('type'),\n                            highlight: this.eventtarget.data('highlight'),\n                            courseid: this.eventtarget.data('courseid'),\n                            badgeid: this.eventtarget.data('badgeid')\n                        }));\n                    }.bind(this));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    this.modal.getRoot().on(ModalEvents.shown, function() {\n                        this.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    }.bind(this));\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                    return this.modal.show();\n                }.bind(this));\n\n            }.bind(this));\n        };\n\n        EditBadge.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata)};\n\n            return Fragment.loadFragment('local_evokegame', 'badge_form', this.contextid, params);\n        };\n\n        EditBadge.prototype.handleFormSubmissionResponse = function(data) {\n            this.modal.hide();\n            // We could trigger an event instead.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            var badge = JSON.parse(data.data);\n\n            var tablenamecolumn = this.eventtarget.closest('tr').find('td:first');\n\n            tablenamecolumn.html(badge.name);\n\n            this.eventtarget.data('id', badge.id);\n            this.eventtarget.data('name', badge.name);\n            this.eventtarget.data('badgeid', badge.badgeid);\n\n            this.eventtarget.closest('tr').hide('normal').show('normal');\n\n            var Toast = Swal.mixin({\n                toast: true,\n                position: 'top-end',\n                showConfirmButton: false,\n                timer: 8000,\n                timerProgressBar: true,\n                onOpen: (toast) => {\n                    toast.addEventListener('mouseenter', Swal.stopTimer);\n                    toast.addEventListener('mouseleave', Swal.resumeTimer);\n                }\n            });\n\n            Toast.fire({\n                icon: 'success',\n                title: data.message\n            });\n        };\n\n        EditBadge.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         *\n         * @private\n         *\n         * @param {Event} e Form submission event.\n         */\n        EditBadge.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'local_evokegame_editbadge',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n                done: this.handleFormSubmissionResponse.bind(this),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        EditBadge.prototype.submitForm = function(e) {\n            e.preventDefault();\n\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return {\n            init: function(contextid) {\n                return new EditBadge(contextid);\n            }\n        };\n    }\n);\n"],"names":["define","$","Config","Str","ModalFactory","ModalEvents","Fragment","Ajax","Swal","Y","EditBadge","contextid","registerEventListeners","prototype","modal","eventtarget","on","event","preventDefault","currentTarget","get_string","then","title","create","type","types","SAVE_CANCEL","body","this","getBody","id","data","name","description","highlight","courseid","badgeid","bind","getRoot","hidden","setBody","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","badge","parse","closest","find","html","mixin","toast","position","showConfirmButton","timer","timerProgressBar","onOpen","addEventListener","stopTimer","resumeTimer","fire","icon","message","handleFormSubmissionFailure","e","changeEvent","document","createEvent","initEvent","each","index","element","dispatchEvent","invalid","merge","length","first","focus","formData","serialize","call","methodname","args","done","fail","submit","init"],"mappings":"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"}